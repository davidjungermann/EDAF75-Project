/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package applications.rest;

import java.sql.*;
import java.util.*;
import spark.*;
import spark.Redirect.Status;

import static spark.Spark.*;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.nio.charset.StandardCharsets;
import java.math.BigInteger;

public class App {

    public static void main(String[] args) {
        var db = new Database("krusty.sqlite");
        port(8888);
        post("/reset", (req, res) -> db.reset(req, res));
        get("/customers", (req, res) -> db.getCustomers(req, res));
        get("/ingredients", (req, res) -> db.getMaterials(req, res));
        get("/cookies", (req, res) -> db.getCookies(req, res));
        get("/recipes", (req, res) -> db.getRecipes(req, res));
        post("/pallets", (req, res) -> db.postPallet(req, res));
        get("/pallets", (req, res) -> db.getPallets(req, res));
        post("/block/:cookie/:from/:to",
                (req, res) -> db.blockPallets(req, res, req.params(":cookie"), req.params(":from"), req.params(":to")));
        post("/unblock/:cookie/:from/:to", (req, res) -> db.unblockPallets(req, res, req.params(":cookie"),
                req.params(":from"), req.params(":to")));
    }
}

class Database {

    /**
     * The database connection.
     */
    private Connection conn;

    /**
     * Creates the database interface object. Connection to the database is
     * performed later.
     */
    public Database(String filename) {
        openConnection(filename);
    }

    /**
     * Opens a connection to the database, using the specified filename (if we'd
     * used a traditional DBMS, such as PostgreSQL or MariaDB, we would have
     * specified username and password instead).
     */
    public boolean openConnection(String filename) {
        try {
            Class.forName("org.sqlite.JDBC");
            conn = DriverManager.getConnection("jdbc:sqlite:" + filename);
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    /**
     * Closes the connection to the database.
     */
    public void closeConnection() {
        try {
            if (conn != null) {
                conn.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Checks if the connection to the database has been established
     * 
     * @return true if the connection has been established
     */
    public boolean isConnected() {
        return conn != null;
    }

    String reset(Request req, Response res) {
        res.type("application/json");
        String[] statements = { "PRAGMA foreign_keys = OFF;", "DELETE FROM cookies", "DELETE FROM pallets",
                "DELETE FROM orders", "DELETE FROM order_sizes", "DELETE FROM customers", "DELETE FROM materials",
                "DELETE FROM ingredients",

                "INSERT INTO customers (customer_name, address)" + "VALUES('Finkakor AB', 'Helsingborg')",
                "INSERT INTO customers (customer_name, address)" + "VALUES('Småbröd AB', 'Malmö')",
                "INSERT INTO customers (customer_name, address)" + "VALUES('Kaffebröd AB', 'Landskrona')",
                "INSERT INTO customers (customer_name, address)" + "VALUES('Bjudkakor AB', 'Ystad')",
                "INSERT INTO customers (customer_name, address)" + "VALUES('Kalaskakor AB', 'Trelleborg')",
                "INSERT INTO customers (customer_name, address)" + "VALUES('Partykakor AB', 'Kristianstad')",
                "INSERT INTO customers (customer_name, address)" + "VALUES('Gästkakor AB', 'Hässleholm')",
                "INSERT INTO customers (customer_name, address)" + "VALUES ('Skånekakor AB', 'Perstorp')",

                "INSERT INTO cookies (cookie_name)" + "VALUES('Nut ring')",
                "INSERT INTO cookies (cookie_name)" + "VALUES('Nut cookie')",
                "INSERT INTO cookies (cookie_name)" + "VALUES('Amneris')",
                "INSERT INTO cookies (cookie_name)" + "VALUES('Tango')",
                "INSERT INTO cookies (cookie_name)" + "VALUES('Almond delight')",
                "INSERT INTO cookies (cookie_name)" + "VALUES('Berliner')",

                "INSERT INTO materials (material_name, material_amount, unit)" + "VALUES('Flour', 100000, 'g')",
                "INSERT INTO materials (material_name, material_amount, unit)" + "VALUES('Butter', 100000, 'g')",
                "INSERT INTO materials (material_name, material_amount, unit)" + "VALUES('Icing sugar', 100000, 'g')",
                "INSERT INTO materials (material_name, material_amount, unit)"
                        + "VALUES('Roasted, chopped nuts', 100000, 'g')",
                "INSERT INTO materials (material_name, material_amount, unit)"
                        + "VALUES('Fine-ground nuts', 100000, 'g')",
                "INSERT INTO materials (material_name, material_amount, unit)"
                        + "VALUES('Ground, roasted nuts', 100000, 'g')",
                "INSERT INTO materials (material_name, material_amount, unit)" + "VALUES('Bread crumbs', 100000, 'g')",
                "INSERT INTO materials (material_name, material_amount, unit)" + "VALUES('Sugar', 100000, 'g')",
                "INSERT INTO materials (material_name, material_amount, unit)" + "VALUES('Egg whites', 100000, 'ml')",
                "INSERT INTO materials (material_name, material_amount, unit)" + "VALUES('Chocolate', 100000, 'g')",
                "INSERT INTO materials (material_name, material_amount, unit)" + "VALUES('Marzipan', 100000, 'g')",
                "INSERT INTO materials (material_name, material_amount, unit)" + "VALUES('Eggs', 100000, 'g')",
                "INSERT INTO materials (material_name, material_amount, unit)" + "VALUES('Potato starch', 100000, 'g')",
                "INSERT INTO materials (material_name, material_amount, unit)" + "VALUES('Wheat flour', 100000, 'g')",
                "INSERT INTO materials (material_name, material_amount, unit)"
                        + "VALUES('Sodium bicarbonate', 100000, 'g')",
                "INSERT INTO materials (material_name, material_amount, unit)" + "VALUES('Vanilla', 100000, 'g')",
                "INSERT INTO materials (material_name, material_amount, unit)"
                        + "VALUES('Chopped almonds', 100000, 'g')",
                "INSERT INTO materials (material_name, material_amount, unit)" + "VALUES('Cinnamon', 100000, 'g')",
                "INSERT INTO materials (material_name, material_amount, unit)" + "VALUES('Vanilla sugar', 100000, 'g')",

                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Nut ring', 'Flour', 450)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Nut ring', 'Butter', 450)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Nut ring', 'Icing sugar', 190)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Nut ring', 'Roasted, chopped nuts', 225)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Nut cookie', 'Fine-ground nuts', 750)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Nut cookie', 'Ground, roasted nuts', 625)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Nut cookie', 'Bread crumbs', 125)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Nut cookie', 'Sugar', 375)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Nut cookie', 'Egg whites', 350)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Nut cookie', 'Chocolate', 50)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Amneris', 'Marzipan', 750)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Amneris', 'Butter', 250)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Amneris', 'Eggs', 250)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Amneris', 'Potato starch', 25)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Amneris', 'Wheat flour', 25)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Tango', 'Butter', 200)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Tango', 'Sugar', 250)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Tango', 'Flour', 300)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Tango', 'Sodium bicarbonate', 4)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Tango', 'Vanilla', 2)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Almond delight', 'Butter', 400)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Almond delight', 'Sugar', 270)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Almond delight', 'Chopped almonds', 279)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Almond delight', 'Flour', 400)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Almond delight', 'Cinnamon', 10)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Berliner', 'Flour', 350)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Berliner', 'Butter', 250)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Berliner', 'Icing sugar', 100)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Berliner', 'Eggs', 50)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Berliner', 'Vanilla sugar', 5)",
                "INSERT INTO ingredients (cookie_name, material_name, ingredient_amount)"
                        + "VALUES ('Berliner', 'Chocolate', 50)",
                "PRAGMA foreign_keys = ON;" };

        try (var ps = conn.createStatement()) {
            for (String statement : statements) {
                ps.addBatch(statement);
            }
            ps.executeBatch();
            res.status(200);
            JsonObject item = new JsonObject();
            item.addProperty("status", "ok");
            return item.toString();
        } catch (SQLException e) {
            e.printStackTrace();
            res.status(500);
            return "";
        }
    }

    public String getCustomers(Request req, Response res) {
        res.type("application/json");
        var query = "SELECT customer_name AS name, address\n" + "FROM customers\n";
        try (var ps = conn.prepareStatement(query)) {
            var rs = ps.executeQuery();
            var result = JSONizer.toJSON(rs, "customers");
            res.status(200);
            res.body(result);
            return result;
        } catch (SQLException e) {
            e.printStackTrace();
            res.status(500);
        }
        return "";
    }

    public String getMaterials(Request req, Response res) {
        res.type("application/json");
        var query = "SELECT material_name AS name, material_amount AS quantity, unit\n" + "FROM materials\n";
        try (var ps = conn.prepareStatement(query)) {
            var rs = ps.executeQuery();
            var result = JSONizer.toJSON(rs, "ingredients");
            res.status(200);
            res.body(result);
            return result;
        } catch (SQLException e) {
            e.printStackTrace();
            res.status(500);
        }
        return "";
    }

    public String getCookies(Request req, Response res) {
        res.type("application/json");
        var query = "SELECT cookie_name AS name\n" + "FROM cookies\n" + "ORDER BY cookie_name\n";
        try (var ps = conn.prepareStatement(query)) {
            var index = 0;
            var rs = ps.executeQuery();
            var result = JSONizer.toJSON(rs, "cookies");
            res.status(200);
            res.body(result);
            return result;
        } catch (SQLException e) {
            e.printStackTrace();
            res.status(500);
        }
        return "";
    }

    public String getRecipes(Request req, Response res) {
        res.type("application/json");
        var query = "SELECT cookie_name AS cookie, material_name AS ingredient, ingredient_amount AS quantity, unit\n"
                + "FROM cookies\n" + "JOIN ingredients\n" + "USING (cookie_name)\n" + "JOIN materials\n"
                + "USING (material_name)" + "ORDER BY cookie, ingredient";
        try (var ps = conn.prepareStatement(query)) {
            var rs = ps.executeQuery();
            var result = JSONizer.toJSON(rs, "recipes");
            res.status(200);
            res.body(result);
            return result;
        } catch (SQLException e) {
            e.printStackTrace();
            res.status(500);
        }
        return "";
    }

    String postPallet(Request req, Response res) {
        res.type("application/json");
        JsonObject item = new JsonObject();
        var quantityQuery = "SELECT material_name, material_amount, ingredient_amount\n" + "FROM materials\n"
                + "JOIN ingredients\n" + "USING (material_name)\n" + "WHERE cookie_name = ?";
        try (var ps = conn.prepareStatement(quantityQuery)) {
            ps.setString(1, req.queryParams("cookie"));
            var rs = ps.executeQuery();
            while (rs.next()) {
                var matName = rs.getString("material_name");
                var matAmt = rs.getInt("material_amount");
                var ingAmt = rs.getInt("ingredient_amount") * 54;
                if (ingAmt > matAmt) {
                    res.status(400);
                    item.addProperty("status", "not enough ingredients");
                    return item.toString();
                }
                var updateStatement = "UPDATE materials\n" + "SET material_amount = (material_amount - ?)\n"
                        + "WHERE material_name = ?;";
                try (var ps2 = conn.prepareStatement(updateStatement)) {
                    ps2.setInt(1, ingAmt);
                    ps2.setString(2, matName);
                    ps2.executeUpdate();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        var insertStatement = "INSERT \n" + "INTO pallets(cookie_name, production_date)\n"
                + "VALUES  (?, CURRENT_DATE);";
        try (var ps = conn.prepareStatement(insertStatement)) {
            ps.setString(1, req.queryParams("cookie"));
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            item.addProperty("status", "no such cookie");
            return item.toString();
        }
        var query = "SELECT pallet_id\n" + "FROM pallets\n" + "WHERE rowid = last_insert_rowid()";
        try (var ps = conn.prepareStatement(query)) {
            var rs = ps.executeQuery();
            if (rs.next()) {
                var id = rs.getString("pallet_id");
                res.status(201);
                JsonArray array = new JsonArray();
                item.addProperty("status", "ok");
                item.addProperty("id", id);
                array.add(item);
                return item.toString();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return "";
    }

    public String getPallets(Request req, Response res) {
        res.type("application/json");
        var query = "SELECT pallet_id AS id, cookie_name AS cookie, production_date AS ProductionDate, blocked, customer_id as customer\n"
                + "FROM pallets\n" + "LEFT JOIN orders\n" + "USING (order_nbr)\n" + "WHERE 1=1\n";
        var params = new LinkedList<String>();
        if (req.queryParams("cookie") != null) {
            query += "AND cookie = ? \n";
            params.add(req.queryParams("cookie"));
        }
        if (req.queryParams("blocked") != null) {
            query += "AND blocked = ?";
            params.add(req.queryParams("blocked"));
        }
        if (req.queryParams("before") != null) {
            query += "AND production_date < ? \n";
            params.add(req.queryParams("before"));
        }
        if (req.queryParams("after") != null) {
            query += "AND production_date > ? \n";
            params.add(req.queryParams("after"));
        }
        try (var ps = conn.prepareStatement(query)) {
            var index = 0;
            for (var param : params) {
                ps.setString(++index, param);
            }
            var rs = ps.executeQuery();

            var result = JSONizer.toJSON(rs, "pallets");
            res.status(200);
            res.body(result);
            return result;
        } catch (SQLException e) {
            e.printStackTrace();
            res.status(500);
        }
        return "";
    }

    String blockPallets(Request req, Response res, String cookie, String from, String to) {
        res.type("application/json");
        var statement = "UPDATE pallets \n" + "SET blocked = true\n"
                + "WHERE cookie_name = ? AND production_date BETWEEN ? AND ?;";
        try (var ps = conn.prepareStatement(statement)) {
            ps.setString(1, cookie);
            ps.setString(2, from);
            ps.setString(3, to);
            ps.executeUpdate();
        } catch (SQLException e) {
            res.status(400);
        }
        res.status(200);
        JsonObject item = new JsonObject();
        item.addProperty("status", "ok");
        return item.toString();
    }

    String unblockPallets(Request req, Response res, String cookie, String from, String to) {
        res.type("application/json");
        var statement = "UPDATE pallets \n" + "SET blocked = false\n"
                + "WHERE cookie_name = ? AND production_date BETWEEN ? AND ?;";
        try (var ps = conn.prepareStatement(statement)) {
            ps.setString(1, cookie);
            ps.setString(2, from);
            ps.setString(3, to);
            ps.executeUpdate();
        } catch (SQLException e) {
            res.status(400);
        }
        res.status(200);
        JsonObject item = new JsonObject();
        item.addProperty("status", "ok");
        return item.toString();
    }
}

/**
 * Auxiliary class for automatically translating a ResultSet to JSON
 */
class JSONizer {

    public static String toJSON(ResultSet rs, String name) throws SQLException {
        StringBuilder sb = new StringBuilder();
        ResultSetMetaData meta = rs.getMetaData();
        boolean first = true;
        sb.append("{\n");
        sb.append("  \"" + name + "\": [\n");
        while (rs.next()) {
            if (!first) {
                sb.append(",");
                sb.append("\n");
            }
            first = false;
            sb.append("    {");
            for (int i = 1; i <= meta.getColumnCount(); i++) {
                String label = meta.getColumnLabel(i);
                String value = getValue(rs, i, meta.getColumnType(i));
                sb.append("\"" + label + "\": " + value);
                if (i < meta.getColumnCount()) {
                    sb.append(", ");
                }
            }
            sb.append("}");
        }
        sb.append("\n");
        sb.append("  ]\n");
        sb.append("}\n");
        return sb.toString();
    }

    private static String getValue(ResultSet rs, int i, int columnType) throws SQLException {
        switch (columnType) {
        case java.sql.Types.INTEGER:
            return String.valueOf(rs.getInt(i));
        case java.sql.Types.REAL:
        case java.sql.Types.DOUBLE:
        case java.sql.Types.FLOAT:
            return String.valueOf(rs.getDouble(i));
        default:
            return "\"" + rs.getString(i) + "\"";
        }
    }
}
